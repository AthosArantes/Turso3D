#ifndef I_BRDF_H
#define I_BRDF_H

const float PI = 3.14159;

// ====================================================================================================
// Normal Distribution Functions
// ====================================================================================================
float DistributionGGX(float NdotH, float a)
{
	float a2 = a*a;
	float NdotH2 = NdotH * NdotH;

	float denom = (NdotH2 * (a2 - 1.0) + 1.0);
	denom = PI * denom * denom;

	return a2 / denom;
}

// ====================================================================================================
// Geometric Attenuation Functions
// ====================================================================================================
float GeometrySchlickGGX(float NdotV, float k)
{
	return NdotV / (NdotV * (1.0 - k) + k);
}

float GeometrySmith(float NdotV, float NdotL, float k)
{
	return GeometrySchlickGGX(NdotV, k) * GeometrySchlickGGX(NdotL, k);
}

// ====================================================================================================
// Fresnel Functions
// ====================================================================================================
vec3 FresnelSchlick(float cosTheta, vec3 F0)
{
	return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

// ====================================================================================================
// Combined Functions
// ====================================================================================================
vec3 CookTorranceBRDF(float NdotV, float NdotH, float NdotL, float HdotV, vec3 lightColor, vec3 albedo, vec3 f0, float metallic, float roughness, float attenuation)
{
	vec3 F0 = mix(f0, albedo, metallic);
	vec3 F = FresnelSchlick(HdotV, F0);

	float NDF = DistributionGGX(NdotH, roughness);
	float G = GeometrySmith(NdotV, NdotL, roughness);

	vec3 numerator = NDF * G * F;
	float denominator = 4.0 * NdotV * NdotL + 0.0001;
	vec3 specular = (numerator / denominator) * attenuation;

	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;
	kD *= 1.0 - metallic;

	return (kD * albedo / PI + specular) * lightColor * NdotL;
}

float OrenNayarDiffuse(float LdotV, float NdotL, float NdotV, float roughness, float albedo)
{
	float s = LdotV - NdotL * NdotV;
	float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));

	float sigma2 = roughness * roughness;
	float A = 1.0 + sigma2 * (albedo / (sigma2 + 0.13) + 0.5 / (sigma2 + 0.33));
	float B = 0.45 * sigma2 / (sigma2 + 0.09);

	return albedo * max(0.0, NdotL) * (A + B * s / t) / PI;
}

#endif
