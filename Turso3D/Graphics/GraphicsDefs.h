#pragma once

#include <Turso3D/Math/Vector4.h>
#include <cstddef>

namespace Turso3D
{
	// Maximum simultaneous vertex buffers.
	constexpr size_t MAX_VERTEX_STREAMS = 4;
	// Maximum number of material textures
	constexpr size_t MAX_MATERIAL_TEXTURE_UNITS = 8;
	// Maximum number of textures in use at once.
	constexpr size_t MAX_TEXTURE_UNITS = 16;
	// Maximum number of constant buffer slots in use at once.
	constexpr size_t MAX_CONSTANT_BUFFER_SLOTS = 8;
	// Maximum number of color rendertargets in use at once.
	constexpr size_t MAX_RENDERTARGETS = 4;
	// Number of cube map faces.
	constexpr unsigned MAX_CUBE_FACES = 6;

	enum ImageFormat
	{
		FORMAT_NONE = 0,

		FORMAT_RG4_UNORM_PACK8,
		FORMAT_RGBA4_UNORM_PACK16,
		FORMAT_BGRA4_UNORM_PACK16,
		FORMAT_R5G6B5_UNORM_PACK16,
		FORMAT_B5G6R5_UNORM_PACK16,
		FORMAT_RGB5A1_UNORM_PACK16,
		FORMAT_BGR5A1_UNORM_PACK16,
		FORMAT_A1RGB5_UNORM_PACK16,

		FORMAT_R8_UNORM_PACK8,
		FORMAT_R8_SNORM_PACK8,
		FORMAT_R8_USCALED_PACK8,
		FORMAT_R8_SSCALED_PACK8,
		FORMAT_R8_UINT_PACK8,
		FORMAT_R8_SINT_PACK8,
		FORMAT_R8_SRGB_PACK8,

		FORMAT_RG8_UNORM_PACK8,
		FORMAT_RG8_SNORM_PACK8,
		FORMAT_RG8_USCALED_PACK8,
		FORMAT_RG8_SSCALED_PACK8,
		FORMAT_RG8_UINT_PACK8,
		FORMAT_RG8_SINT_PACK8,
		FORMAT_RG8_SRGB_PACK8,

		FORMAT_RGB8_UNORM_PACK8,
		FORMAT_RGB8_SNORM_PACK8,
		FORMAT_RGB8_USCALED_PACK8,
		FORMAT_RGB8_SSCALED_PACK8,
		FORMAT_RGB8_UINT_PACK8,
		FORMAT_RGB8_SINT_PACK8,
		FORMAT_RGB8_SRGB_PACK8,

		FORMAT_BGR8_UNORM_PACK8,
		FORMAT_BGR8_SNORM_PACK8,
		FORMAT_BGR8_USCALED_PACK8,
		FORMAT_BGR8_SSCALED_PACK8,
		FORMAT_BGR8_UINT_PACK8,
		FORMAT_BGR8_SINT_PACK8,
		FORMAT_BGR8_SRGB_PACK8,

		FORMAT_RGBA8_UNORM_PACK8,
		FORMAT_RGBA8_SNORM_PACK8,
		FORMAT_RGBA8_USCALED_PACK8,
		FORMAT_RGBA8_SSCALED_PACK8,
		FORMAT_RGBA8_UINT_PACK8,
		FORMAT_RGBA8_SINT_PACK8,
		FORMAT_RGBA8_SRGB_PACK8,

		FORMAT_BGRA8_UNORM_PACK8,
		FORMAT_BGRA8_SNORM_PACK8,
		FORMAT_BGRA8_USCALED_PACK8,
		FORMAT_BGRA8_SSCALED_PACK8,
		FORMAT_BGRA8_UINT_PACK8,
		FORMAT_BGRA8_SINT_PACK8,
		FORMAT_BGRA8_SRGB_PACK8,

		FORMAT_RGBA8_UNORM_PACK32,
		FORMAT_RGBA8_SNORM_PACK32,
		FORMAT_RGBA8_USCALED_PACK32,
		FORMAT_RGBA8_SSCALED_PACK32,
		FORMAT_RGBA8_UINT_PACK32,
		FORMAT_RGBA8_SINT_PACK32,
		FORMAT_RGBA8_SRGB_PACK32,

		FORMAT_RGB10A2_UNORM_PACK32,
		FORMAT_RGB10A2_SNORM_PACK32,
		FORMAT_RGB10A2_USCALED_PACK32,
		FORMAT_RGB10A2_SSCALED_PACK32,
		FORMAT_RGB10A2_UINT_PACK32,
		FORMAT_RGB10A2_SINT_PACK32,

		FORMAT_BGR10A2_UNORM_PACK32,
		FORMAT_BGR10A2_SNORM_PACK32,
		FORMAT_BGR10A2_USCALED_PACK32,
		FORMAT_BGR10A2_SSCALED_PACK32,
		FORMAT_BGR10A2_UINT_PACK32,
		FORMAT_BGR10A2_SINT_PACK32,

		FORMAT_R16_UNORM_PACK16,
		FORMAT_R16_SNORM_PACK16,
		FORMAT_R16_USCALED_PACK16,
		FORMAT_R16_SSCALED_PACK16,
		FORMAT_R16_UINT_PACK16,
		FORMAT_R16_SINT_PACK16,
		FORMAT_R16_SFLOAT_PACK16,

		FORMAT_RG16_UNORM_PACK16,
		FORMAT_RG16_SNORM_PACK16,
		FORMAT_RG16_USCALED_PACK16,
		FORMAT_RG16_SSCALED_PACK16,
		FORMAT_RG16_UINT_PACK16,
		FORMAT_RG16_SINT_PACK16,
		FORMAT_RG16_SFLOAT_PACK16,

		FORMAT_RGB16_UNORM_PACK16,
		FORMAT_RGB16_SNORM_PACK16,
		FORMAT_RGB16_USCALED_PACK16,
		FORMAT_RGB16_SSCALED_PACK16,
		FORMAT_RGB16_UINT_PACK16,
		FORMAT_RGB16_SINT_PACK16,
		FORMAT_RGB16_SFLOAT_PACK16,

		FORMAT_RGBA16_UNORM_PACK16,
		FORMAT_RGBA16_SNORM_PACK16,
		FORMAT_RGBA16_USCALED_PACK16,
		FORMAT_RGBA16_SSCALED_PACK16,
		FORMAT_RGBA16_UINT_PACK16,
		FORMAT_RGBA16_SINT_PACK16,
		FORMAT_RGBA16_SFLOAT_PACK16,

		FORMAT_R32_UINT_PACK32,
		FORMAT_R32_SINT_PACK32,
		FORMAT_R32_SFLOAT_PACK32,

		FORMAT_RG32_UINT_PACK32,
		FORMAT_RG32_SINT_PACK32,
		FORMAT_RG32_SFLOAT_PACK32,

		FORMAT_RGB32_UINT_PACK32,
		FORMAT_RGB32_SINT_PACK32,
		FORMAT_RGB32_SFLOAT_PACK32,

		FORMAT_RGBA32_UINT_PACK32,
		FORMAT_RGBA32_SINT_PACK32,
		FORMAT_RGBA32_SFLOAT_PACK32,

		FORMAT_R64_UINT_PACK64,
		FORMAT_R64_SINT_PACK64,
		FORMAT_R64_SFLOAT_PACK64,

		FORMAT_RG64_UINT_PACK64,
		FORMAT_RG64_SINT_PACK64,
		FORMAT_RG64_SFLOAT_PACK64,

		FORMAT_RGB64_UINT_PACK64,
		FORMAT_RGB64_SINT_PACK64,
		FORMAT_RGB64_SFLOAT_PACK64,

		FORMAT_RGBA64_UINT_PACK64,
		FORMAT_RGBA64_SINT_PACK64,
		FORMAT_RGBA64_SFLOAT_PACK64,

		FORMAT_RG11B10_UFLOAT_PACK32,
		FORMAT_RGB9E5_UFLOAT_PACK32,

		FORMAT_D16_UNORM_PACK16,
		FORMAT_D24_UNORM_PACK32,
		FORMAT_D32_SFLOAT_PACK32,
		FORMAT_S8_UINT_PACK8,
		FORMAT_D16_UNORM_S8_UINT_PACK32,
		FORMAT_D24_UNORM_S8_UINT_PACK32,
		FORMAT_D32_SFLOAT_S8_UINT_PACK64,

		FORMAT_RGB_DXT1_UNORM_BLOCK8,
		FORMAT_RGB_DXT1_SRGB_BLOCK8,
		FORMAT_RGBA_DXT1_UNORM_BLOCK8,
		FORMAT_RGBA_DXT1_SRGB_BLOCK8,
		FORMAT_RGBA_DXT3_UNORM_BLOCK16,
		FORMAT_RGBA_DXT3_SRGB_BLOCK16,
		FORMAT_RGBA_DXT5_UNORM_BLOCK16,
		FORMAT_RGBA_DXT5_SRGB_BLOCK16,
		FORMAT_R_ATI1N_UNORM_BLOCK8,
		FORMAT_R_ATI1N_SNORM_BLOCK8,
		FORMAT_RG_ATI2N_UNORM_BLOCK16,
		FORMAT_RG_ATI2N_SNORM_BLOCK16,
		FORMAT_RGB_BP_UFLOAT_BLOCK16,
		FORMAT_RGB_BP_SFLOAT_BLOCK16,
		FORMAT_RGBA_BP_UNORM_BLOCK16,
		FORMAT_RGBA_BP_SRGB_BLOCK16,

		FORMAT_RGB_ETC2_UNORM_BLOCK8,
		FORMAT_RGB_ETC2_SRGB_BLOCK8,
		FORMAT_RGBA_ETC2_UNORM_BLOCK8,
		FORMAT_RGBA_ETC2_SRGB_BLOCK8,
		FORMAT_RGBA_ETC2_UNORM_BLOCK16,
		FORMAT_RGBA_ETC2_SRGB_BLOCK16,
		FORMAT_R_EAC_UNORM_BLOCK8,
		FORMAT_R_EAC_SNORM_BLOCK8,
		FORMAT_RG_EAC_UNORM_BLOCK16,
		FORMAT_RG_EAC_SNORM_BLOCK16,

		FORMAT_RGBA_ASTC_4X4_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_4X4_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_5X4_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_5X4_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_5X5_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_5X5_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_6X5_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_6X5_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_6X6_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_6X6_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_8X5_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_8X5_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_8X6_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_8X6_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_8X8_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_8X8_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_10X5_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_10X5_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_10X6_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_10X6_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_10X8_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_10X8_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_10X10_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_10X10_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_12X10_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_12X10_SRGB_BLOCK16,
		FORMAT_RGBA_ASTC_12X12_UNORM_BLOCK16,
		FORMAT_RGBA_ASTC_12X12_SRGB_BLOCK16,

		FORMAT_RGB_PVRTC1_8X8_UNORM_BLOCK32,
		FORMAT_RGB_PVRTC1_8X8_SRGB_BLOCK32,
		FORMAT_RGB_PVRTC1_16X8_UNORM_BLOCK32,
		FORMAT_RGB_PVRTC1_16X8_SRGB_BLOCK32,
		FORMAT_RGBA_PVRTC1_8X8_UNORM_BLOCK32,
		FORMAT_RGBA_PVRTC1_8X8_SRGB_BLOCK32,
		FORMAT_RGBA_PVRTC1_16X8_UNORM_BLOCK32,
		FORMAT_RGBA_PVRTC1_16X8_SRGB_BLOCK32,
		FORMAT_RGBA_PVRTC2_4X4_UNORM_BLOCK8,
		FORMAT_RGBA_PVRTC2_4X4_SRGB_BLOCK8,
		FORMAT_RGBA_PVRTC2_8X4_UNORM_BLOCK8,
		FORMAT_RGBA_PVRTC2_8X4_SRGB_BLOCK8,

		FORMAT_RGB_ETC_UNORM_BLOCK8,
		FORMAT_RGB_ATC_UNORM_BLOCK8,
		FORMAT_RGBA_ATCA_UNORM_BLOCK16,
		FORMAT_RGBA_ATCI_UNORM_BLOCK16,

		FORMAT_L8_UNORM_PACK8,
		FORMAT_A8_UNORM_PACK8,
		FORMAT_LA8_UNORM_PACK8,
		FORMAT_L16_UNORM_PACK16,
		FORMAT_A16_UNORM_PACK16,
		FORMAT_LA16_UNORM_PACK16,

		FORMAT_BGR8_UNORM_PACK32,
		FORMAT_BGR8_SRGB_PACK32,

		FORMAT_RG3B2_UNORM_PACK8
	};

	// Primitive types.
	enum PrimitiveType
	{
		PT_LINE_LIST = 0,
		PT_TRIANGLE_LIST
	};

	// Element types for vertex elements.
	enum ElementType
	{
		ELEM_INT = 0,
		ELEM_FLOAT,
		ELEM_VECTOR2,
		ELEM_VECTOR3,
		ELEM_VECTOR4,
		ELEM_UBYTE4,
		MAX_ELEMENT_TYPES
	};

	// Vertex element sizes by element type.
	constexpr size_t ElementTypeSize(ElementType value)
	{
		constexpr const size_t data[] = {
			sizeof(int),
			sizeof(float),
			sizeof(Vector2),
			sizeof(Vector3),
			sizeof(Vector4),
			sizeof(unsigned),
			0
		};
		return data[value];
	}

	// Element semantics for vertex elements.
	enum ElementSemantic
	{
		SEM_POSITION = 0,
		SEM_NORMAL,
		SEM_TANGENT,
		SEM_COLOR,
		SEM_TEXCOORD,
		SEM_BLENDWEIGHTS,
		SEM_BLENDINDICES,
		MAX_ELEMENT_SEMANTICS
	};

	constexpr const char* ElementSemanticName(ElementSemantic value)
	{
		constexpr const char* data[] = {
			"POSITION",
			"NORMAL",
			"TANGENT",
			"TEXCOORD",
			"COLOR",
			"BLENDWEIGHT",
			"BLENDINDICES",
			nullptr
		};
		return data[value];
	}

	// Vertex attribute indices.
	enum VertexAttribute
	{
		ATTR_POSITION = 0,
		ATTR_NORMAL,
		ATTR_TANGENT,
		ATTR_VERTEXCOLOR,
		ATTR_TEXCOORD,
		ATTR_TEXCOORD1,
		ATTR_TEXCOORD2,
		ATTR_TEXCOORD3,
		ATTR_TEXCOORD4,
		ATTR_TEXCOORD5,
		ATTR_BLENDWEIGHTS,
		ATTR_BLENDINDICES,
		MAX_VERTEX_ATTRIBUTES
	};

	constexpr const char* VertexAttributeName(VertexAttribute value)
	{
		constexpr const char* data[] = {
			"position",
			"normal",
			"tangent",
			"color",
			"texCoord",
			"texCoord1",
			"texCoord2",
			"texCoord3",
			"texCoord4",
			"texCoord5",
			"blendWeights",
			"blendIndices",
			nullptr
		};
		return data[value];
	}

	// Vertex attribute bitmasks.
	enum AttributeMask
	{
		MASK_POSITION = 1 << ATTR_POSITION,
		MASK_NORMAL = 1 << ATTR_NORMAL,
		MASK_TANGENT = 1 << ATTR_TANGENT,
		MASK_VERTEXCOLOR = 1 << ATTR_VERTEXCOLOR,
		MASK_TEXCOORD = 1 << ATTR_TEXCOORD,
		MASK_TEXCOORD1 = 1 << ATTR_TEXCOORD1,
		MASK_TEXCOORD2 = 1 << ATTR_TEXCOORD2,
		MASK_TEXCOORD3 = 1 << ATTR_TEXCOORD3,
		MASK_TEXCOORD4 = 1 << ATTR_TEXCOORD4,
		MASK_TEXCOORD5 = 1 << ATTR_TEXCOORD5,
		MASK_BLENDWEIGHTS = 1 << ATTR_BLENDWEIGHTS,
		MASK_BLENDINDICES = 1 << ATTR_BLENDINDICES
	};

	// Predefined blend modes.
	enum BlendMode
	{
		BLEND_REPLACE = 0,
		BLEND_ADD,
		BLEND_MULTIPLY,
		BLEND_ALPHA,
		BLEND_ADDALPHA,
		BLEND_PREMULALPHA,
		BLEND_INVDESTALPHA,
		BLEND_SUBTRACT,
		BLEND_SUBTRACTALPHA,
		MAX_BLEND_MODES
	};
	
	constexpr const char* BlendModeName(BlendMode value)
	{
		constexpr const char* data[] = {
			"replace",
			"add",
			"multiply",
			"alpha",
			"add_alpha",
			"pre_mul_alpha",
			"inv_dest_alpha",
			"subtract",
			"subtract_alpha",
			nullptr
		};
		return data[value];
	}

	// Triangle culling modes.
	enum CullMode
	{
		CULL_NONE = 0,
		CULL_FRONT,
		CULL_BACK,
		MAX_CULL_MODES
	};

	inline static const char* CullModeName(CullMode value)
	{
		const char* data[] =
		{
			"none",
			"front",
			"back",
			nullptr
		};
		return data[value];
	}

	// Depth or stencil compare modes.
	enum CompareMode
	{
		CMP_NEVER = 0,
		CMP_LESS,
		CMP_EQUAL,
		CMP_LESS_EQUAL,
		CMP_GREATER,
		CMP_NOT_EQUAL,
		CMP_GREATER_EQUAL,
		CMP_ALWAYS,
		MAX_COMPARE_MODES
	};

	constexpr const char* CompareModeName(CompareMode value)
	{
		constexpr const char* data[] = {
			"never",
			"less",
			"equal",
			"less_equal",
			"greater",
			"not_equal",
			"greater_equal",
			"always",
			nullptr
		};
		return data[value];
	}

	// Texture types.
	enum TextureTarget
	{
		TARGET_1D,
		TARGET_1D_ARRAY,
		TARGET_2D,
		TARGET_2D_ARRAY,
		TARGET_3D,
		TARGET_RECT,
		TARGET_RECT_ARRAY,
		TARGET_CUBE,
		TARGET_CUBE_ARRAY
	};

	constexpr const char* TextureTargetName(TextureTarget value)
	{
		constexpr const char* data[] = {
			"Texture1D",
			"Texture1DArray",
			"Texture2D",
			"Texture2DArray",
			"Texture3D",
			"TextureRect",
			"TextureRectArray",
			"TextureCube",
			"TextureCubeArray"
		};
		return data[value];
	}

	// Resource usage modes for buffers.
	enum ResourceUsage
	{
		USAGE_DEFAULT = 0,
		USAGE_DYNAMIC
	};

	// Texture filtering modes.
	enum TextureFilterMode
	{
		FILTER_POINT = 0,
		FILTER_BILINEAR,
		FILTER_TRILINEAR,
		FILTER_ANISOTROPIC,
		COMPARE_POINT,
		COMPARE_BILINEAR,
		COMPARE_TRILINEAR,
		COMPARE_ANISOTROPIC
	};

	// Texture addressing modes.
	enum TextureAddressMode
	{
		ADDRESS_WRAP = 0,
		ADDRESS_MIRROR,
		ADDRESS_CLAMP,
		ADDRESS_BORDER,
		ADDRESS_MIRROR_ONCE
	};

	// Preset uniforms outside uniform buffers.
	enum PresetUniform
	{
		U_WORLDMATRIX,
		MAX_PRESET_UNIFORMS
	};
	
	constexpr const char* PresetUniformName(PresetUniform value)
	{
		constexpr const char* data[] = {
			"worldMatrix",
			nullptr
		};
		return data[value];
	}

	// Uniform buffer binding points.
	enum UniformBufferBindings
	{
		UB_PERVIEWDATA = 0,
		UB_LIGHTDATA,
		UB_OBJECTDATA,
		UB_MATERIALDATA
	};

	// Geometry types for vertex shader.
	enum GeometryType
	{
		GEOM_STATIC = 0,
		GEOM_SKINNED,
		GEOM_INSTANCED,
		GEOM_CUSTOM
	};

	// Types of shaders
	enum ShaderType
	{
		SHADER_VS,
		SHADER_FS,
		MAX_SHADER_TYPES
	};
	
	constexpr const char* ShaderTypeName(ShaderType value)
	{
		constexpr const char* data[] = {
			"VS",
			"FS",
			nullptr
		};
		return data[value];
	}

	// Description of an element in a vertex declaration.
	struct VertexElement
	{
		// Default-construct.
		VertexElement() :
			type(ELEM_VECTOR3),
			semantic(SEM_POSITION),
			index(0),
			offset(0)
		{
		}

		// Construct with type, semantic, index and whether is per-instance data.
		VertexElement(ElementType type, ElementSemantic semantic, unsigned char index = 0) :
			type(type),
			semantic(semantic),
			index(index),
			offset(0)
		{
		}

		// Data type of element.
		ElementType type;
		// Semantic of element.
		ElementSemantic semantic;
		// Semantic index of element, for example multi-texcoords.
		unsigned char index;
		// Offset of element from vertex start. Filled by VertexBuffer.
		size_t offset;
	};
}
